package com.sajansthapit.mytodolist.config;import com.sajansthapit.mytodolist.config.filter.JwtFilter;import com.sajansthapit.mytodolist.service.TodoUserDetailsService;import lombok.AllArgsConstructor;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;@Configuration@EnableWebSecurity@AllArgsConstructorpublic class SecurityConfiguration {    private final TodoUserDetailsService todoUserDetailsService;    private final JwtFilter filter;    private final PasswordEncoder passwordEncoder;    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        return http.csrf(AbstractHttpConfigurer::disable)                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))                .formLogin(AbstractHttpConfigurer::disable)                .authorizeHttpRequests(authorize ->                        authorize.requestMatchers("/user/register", "/login")                                .permitAll()                                .anyRequest().authenticated())                .authenticationProvider(authenticationProvider())                .addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class)                .build();    }    @Bean    public AuthenticationProvider authenticationProvider() {        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();        authenticationProvider.setPasswordEncoder(passwordEncoder);        authenticationProvider.setUserDetailsService(todoUserDetailsService);        return authenticationProvider;    }    @Bean    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {        return configuration.getAuthenticationManager();    }}